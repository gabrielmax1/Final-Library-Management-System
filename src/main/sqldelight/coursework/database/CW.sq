-- This is an SQLite version of the Queries, however this is primarely used to create the core SQL Queries used as Functions
-- in our Model (partially at times we have skipped the Model and used them in the Controller).

--- Relational Model (SQL)

CREATE TABLE BOOK (
 id INTEGER PRIMARY KEY AUTOINCREMENT,
TITLE TEXT NOT NULL,
AUTHOR TEXT NOT NULL,
YEAR_OF_PUBLICATION INTEGER NOT NULL,
PUBLISHER TEXT NOT NULL,
SUBJECT TEXT,
AUTHOR_ID INTEGER,
PUBLISHER_ID INTEGER,
FOREIGN KEY(AUTHOR_ID) REFERENCES AUTHOR(id),
FOREIGN KEY(PUBLISHER_ID) REFERENCES PUBLISHER(id)
);

CREATE TABLE AUTHOR (
 id INTEGER PRIMARY KEY AUTOINCREMENT,
 FIRSTNAME TEXT NOT NULL,
 SURNAME TEXT NOT NULL
);

CREATE TABLE PUBLISHER (
 id INTEGER PRIMARY KEY AUTOINCREMENT,
 NAME TEXT NOT NULL
);

-- =========== SQLite queries for DDBB Functions ===========================

allBooks:
SELECT *
FROM BOOK;

allAuthors:
SELECT *
FROM AUTHOR;

allPublisher:
SELECT *
FROM PUBLISHER;

insertBook:
INSERT INTO BOOK ( TITLE, AUTHOR, YEAR_OF_PUBLICATION, PUBLISHER, SUBJECT, AUTHOR_ID, PUBLISHER_ID)
VALUES ( ?, ?, ?, ?,?, ?, ?);

insertAuthors:
INSERT INTO AUTHOR (FIRSTNAME, SURNAME) VALUES (?,?);

insertPublisher:
INSERT INTO PUBLISHER (NAME) VALUES (?);

book_by_Author:
SELECT
    BOOK.TITLE,
    BOOK.AUTHOR,
    BOOK.YEAR_OF_PUBLICATION,
    BOOK.PUBLISHER,
    BOOK.SUBJECT
FROM BOOK
INNER JOIN AUTHOR
ON BOOK.AUTHOR_ID = AUTHOR.id
WHERE BOOK.AUTHOR_ID = ? ;

book_by_Publisher:
SELECT
    BOOK.TITLE,
    BOOK.AUTHOR,
    BOOK.YEAR_OF_PUBLICATION,
    BOOK.PUBLISHER,
    BOOK.SUBJECT
    FROM BOOK
    INNER JOIN PUBLISHER
    ON BOOK.PUBLISHER_ID = PUBLISHER.id
    WHERE BOOK.PUBLISHER_ID = ? ;

Search_Book_by_Title:
SELECT * FROM BOOK
WHERE TITLE LIKE ?;

Search_Author_by_Name:
SELECT * FROM AUTHOR
WHERE FIRSTNAME LIKE ? OR SURNAME LIKE ?;

-- Search_Author_by_Name:
-- SELECT * FROM AUTHOR
-- WHERE FIRSTNAME LIKE ? || '%' OR SURNAME LIKE ? || '%';

Search_Publisher_by_Name:
SELECT * FROM PUBLISHER
WHERE NAME LIKE ?;

EditBookbyEntry:
UPDATE BOOK
SET
    TITLE = ?,
    AUTHOR = ?,
    YEAR_OF_PUBLICATION = ?,
    PUBLISHER = ?,
    SUBJECT = ?
WHERE id = ?;

EditAuthorEntry:
UPDATE AUTHOR
SET
    FIRSTNAME = ?,
    SURNAME = ?

WHERE id = ?;

EditPublisherEntry:
UPDATE PUBLISHER
SET
    NAME = ?
WHERE id = ?;

DeleteBookByID:
DELETE FROM BOOK WHERE id = ?;

DeleteAuthorByID:
DELETE FROM AUTHOR WHERE id = ?;

DeletePublisherByID:
DELETE FROM PUBLISHER WHERE id = ?;

-- UpdtID:
-- DROP TABLE BOOK;
-- UpdID2:
-- ALTER TABLE BOOK AUTOINCREMENT = 1;
-- EditAuthorbyEntry:
-- UPDATE AUTHOR
-- SET
--     FIRSTNAME = ?,
--     SURNAME = ?
-- WHERE  = ?;

-- public data class BOOK(
   --   public val id: Long,
   --   public val TITLE: String,
   --   public val AUTHOR: String,
   --   public val YEAR_OF_PUBLICATION: Long,
   --   public val PUBLISHER: String,
   --   public val SUBJECT: String